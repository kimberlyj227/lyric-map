{"version":3,"sources":["components/Jumbo.js","components/Container.js","utils/Api.js","components/Search.js","utils/SearchContext.js","components/WordCloud.js","components/LyricSearch.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Container","props","fluid","children","artist","title","axios","get","SearchForm","onSubmit","handleFormSubmit","onChange","handleInputChange","value","name","type","placeholder","id","SearchContext","createContext","lyricMap","LyricCloud","useContext","data","fontSizeMapper","word","Math","log2","font","color","width","height","LyricSearch","useState","songState","setSongState","initState","setInitState","stopWords","Set","split","createLyricMap","words","map","w","replace","substring","toLowerCase","filter","has","console","log","countObj","reduce","counts","match","find","count","text","e","target","preventDefault","API","then","res","l","lyrics","catch","err","render","length","Provider","App","Jumbo","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c20fc55f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Jumbotron.css\"\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <div className=\"content\">\n      <h1>LYRIC CLOUD</h1>\n      <p>Search for a song to get your lyric cloud</p>\n      <hr className=\"my-4\"/>\n      </div>\n    </div>\n  )\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;","import axios from \"axios\";\n\nconst BASEURL = \"https://api.lyrics.ovh/v1/\";\n\nexport default {\n  search: function(artist, title) {\n    return axios.get(`${BASEURL}/${artist}/${title}`);\n  }\n};","import React from \"react\";\nimport {Search} from \"react-bootstrap-icons\";\nimport \"../styles/Search.css\";\n// import SearchContext from \"../utils/SearchContext\";\n\nfunction SearchForm(props) {\n  return (\n    <form onSubmit={props.handleFormSubmit}>\n      <div className=\"form-row justify-content-md-center\">\n      <div className=\"form-group col-md-4 \">\n        <input\n          onChange={props.handleInputChange}\n          value={props.artist}\n          name=\"artist\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter Artist Name\"\n          id=\"artist\"\n        />\n        </div>\n        <div className=\"form-group col-md-4 \">\n          <input\n          onChange={props.handleInputChange}\n          value={props.title}\n          name=\"title\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter Song Title\"\n          id=\"title\"\n          />\n        </div>\n        \n        <div className=\"col-md-2\">\n          <button type=\"submit\" className=\"btn border-0 text-white search\">\n          <Search/> Search\n        </button>\n      </div>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React, {createContext} from \"react\";\n\nconst SearchContext = createContext({\n\n    lyricMap: [],\n});\n\nexport default SearchContext;","import React, { useContext } from \"react\";\n// import * as cloud from \"d3-cloud\";\nimport WordCloud from \"react-d3-cloud\";\nimport SearchContext from \"../utils/SearchContext\";\n\n\nfunction LyricCloud() {\nconst {lyricMap} = useContext(SearchContext);\nconst fontSizeMapper = word => Math.log2(word.value) * 15;\nconst rotate = word => ((Math.random() *6 )-3) * 10\n\n// let data = [\n//   {text: \"bob\", value: 2},\n//   {text:\"kittens\", value: 10},\n//   {text: \"hello\", value: 9},\n//   {text: \"mittens\", value: 40},\n//   {text: \"shittens\", value: 100},\n//   {text: \"mountains\", value: 50},\n//   {text: \"seattle\", value: 10},\n// ]\n  \n  return (\n  <WordCloud\n      data={lyricMap}\n      fontSizeMapper={fontSizeMapper}\n      font={\"Roboto\"}\n      color={\"#000000\"}\n      width={1000}\n      height={800}\n      // rotate={rotate}\n      /> \n  )\n}\n\nexport default LyricCloud;","import React, { useState, useEffect } from \"react\";\nimport API from \"../utils/Api.js\";\nimport SearchForm from \"./Search\";\nimport SearchContext from \"../utils/SearchContext.js\";\nimport LyricCloud from \"../components/WordCloud\"\n\n\n\n\nfunction LyricSearch() {\n\n  const [songState, setSongState] = useState({\n    artist: \"\",\n    title: \"\",\n    lyricMap: [],\n  });\n\n  const [initState, setInitState] = useState(true);\n  \n  const { artist, title, lyricMap } = songState;\n  \n  const stopWords = new Set(\"i,me,my,myself,we,us,our,ours,ourselves,you,your,yours,yourself,yourselves,he,him,his,himself,she,her,hers,herself,it,its,itself,they,them,their,theirs,themselves,what,which,who,whom,whose,this,that,these,those,am,is,are,was,were,be,been,being,have,has,had,having,do,does,did,doing,will,would,should,can,could,ought,i'm,you're,he's,she's,it's,we're,they're,i've,you've,we've,they've,i'd,you'd,he'd,she'd,we'd,they'd,i'll,you'll,he'll,she'll,we'll,they'll,isn't,aren't,wasn't,weren't,hasn't,haven't,hadn't,doesn't,don't,didn't,won't,wouldn't,shan't,shouldn't,can't,cannot,couldn't,mustn't,let's,that's,who's,what's,here's,there's,when's,where's,why's,how's,a,an,the,and,but,if,or,because,as,until,while,of,at,by,for,with,about,against,between,into,through,during,before,after,above,below,to,from,up,upon,down,in,out,on,off,over,under,again,further,then,once,here,there,when,where,why,how,all,any,both,each,few,more,most,other,some,such,no,nor,not,only,own,same,so,than,too,very,say,says,said,shall, chorus, 2x, 3x\".split(\",\"));\n\n  // useEffect(() => {\n  //   searchSongs(\"Toto\", \"Africa\")\n  // }, [])\n\n  const searchSongs = (a, t) => {\n\n    API.search(a, t)\n      .then(res => {\n        const l = res.data.lyrics\n        console.log(l)\n        createLyricMap(l);\n        // setSongState({\n        //   ...songState,\n        //   artist: \"\",\n        //   title: \"\"\n        // })\n      })\n      .catch(err => {\n        setInitState(false);\n        setSongState({...songState, lyricMap: []})\n        console.log(err)})\n  }\n\n  const createLyricMap = (words) => {\n    // splits lyrics and replaces punctuation and filters unwanted words\n    let data = words.split(/[\\s.]+/g)\n    .map(w => w.replace(/^[“‘\"\\-—()[\\]{}]+/g, \"\"))\n    .map(w => w.replace(/[;:.!?()[\\]{},\"'’”\\-—]+$/g, \"\"))\n    .map(w => w.replace(/['’]s$/g, \"\"))\n    .map(w => w.substring(0, 30))\n    .map(w => w.toLowerCase())\n    .filter(w => w && !stopWords.has(w));\n    console.log(data);\n\n    const countObj = data.reduce((counts, word) =>  {\n      let match = counts.find(count => count.text === word)\n      if (match) {\n        match.value++\n      } else  {\n        counts = [...counts, {text: word, value: 5}]\n      }\n      return counts\n    }, [])\n    console.log(countObj)\n    setSongState({...songState, lyricMap: countObj});\n    }\n    \n  const handleInputChange = (e) => {\n    const {name, value} = e.target;\n    setSongState({...songState, \n      [name]: value\n    })\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const {name, value} = e.target;\n    setSongState({...songState, \n      [name]: value\n    })\n\n    searchSongs(artist, title);\n\n    setSongState({...songState, artist: \"\", title: \"\"})\n\n  }\n\n  const render = lyricMap.length > 0 || initState ? <LyricCloud/> : <h2>No lyrics found!</h2>\n \n    return (\n      <div>\n          <SearchForm\n            artist={artist}\n            title={title}\n            handleFormSubmit={handleFormSubmit}\n            handleInputChange={handleInputChange}\n          />\n        <SearchContext.Provider value={{lyricMap, handleFormSubmit, handleInputChange}}>\n          {render}\n        </SearchContext.Provider>\n      </div>\n\n    )\n\n\n}\n\nexport default LyricSearch;","import React from 'react';\nimport Jumbotron from './components/Jumbo';\n// import GeniusSearch from './components/GeniusSearch';\nimport Container from \"./components/Container\"\nimport LyricSearch from \"./components/LyricSearch\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Jumbotron />\n        <Container >\n        <LyricSearch />\n        </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}